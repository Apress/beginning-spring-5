// Generated by delombok at Sat Apr 06 10:25:55 EDT 2019
package com.bsg5.chapter8;

import org.springframework.lang.NonNull;

public class Song {
    Integer id;
    @NonNull
    Integer artistId;
    @NonNull
    String name;
    int votes;

    @java.lang.SuppressWarnings("all")
    public Integer getId() {
        return this.id;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public Integer getArtistId() {
        return this.artistId;
    }

    @NonNull
    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public int getVotes() {
        return this.votes;
    }

    @java.lang.SuppressWarnings("all")
    public void setId(final Integer id) {
        this.id = id;
    }

    @java.lang.SuppressWarnings("all")
    public void setArtistId(@NonNull final Integer artistId) {
        if (artistId == null) {
            throw new java.lang.NullPointerException("artistId is marked @NonNull but is null");
        }
        this.artistId = artistId;
    }

    @java.lang.SuppressWarnings("all")
    public void setName(@NonNull final String name) {
        if (name == null) {
            throw new java.lang.NullPointerException("name is marked @NonNull but is null");
        }
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    public void setVotes(final int votes) {
        this.votes = votes;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Song)) return false;
        final Song other = (Song) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$id = this.getId();
        final java.lang.Object other$id = other.getId();
        if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
        final java.lang.Object this$artistId = this.getArtistId();
        final java.lang.Object other$artistId = other.getArtistId();
        if (this$artistId == null ? other$artistId != null : !this$artistId.equals(other$artistId)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        if (this.getVotes() != other.getVotes()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Song;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $id = this.getId();
        result = result * PRIME + ($id == null ? 43 : $id.hashCode());
        final java.lang.Object $artistId = this.getArtistId();
        result = result * PRIME + ($artistId == null ? 43 : $artistId.hashCode());
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        result = result * PRIME + this.getVotes();
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "Song(id=" + this.getId() + ", artistId=" + this.getArtistId() + ", name=" + this.getName() + ", votes=" + this.getVotes() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public Song() {
    }

    @java.lang.SuppressWarnings("all")
    public Song(final Integer id, @NonNull final Integer artistId, @NonNull final String name, final int votes) {
        if (artistId == null) {
            throw new java.lang.NullPointerException("artistId is marked @NonNull but is null");
        }
        if (name == null) {
            throw new java.lang.NullPointerException("name is marked @NonNull but is null");
        }
        this.id = id;
        this.artistId = artistId;
        this.name = name;
        this.votes = votes;
    }

    @java.lang.SuppressWarnings("all")
    public Song(@NonNull final Integer artistId, @NonNull final String name) {
        if (artistId == null) {
            throw new java.lang.NullPointerException("artistId is marked @NonNull but is null");
        }
        if (name == null) {
            throw new java.lang.NullPointerException("name is marked @NonNull but is null");
        }
        this.artistId = artistId;
        this.name = name;
    }
}
